#  Copyright 2020 Google LLC
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

steps:
  - name: 'ubuntu'
    id: "Set configs"
    script: |
      #!/usr/bin/env bash

      apt-get update > /dev/null
      apt-get -y install jq > /dev/null

      # Config based on branch name
      if [ "$BRANCH_NAME" = "main" ]
      then
          echo "$_APIGEE_TEST_ENV" > /workspace/apigeeEnv.txt
      elif [ "$BRANCH_NAME" = "prod" ]
      then
          echo "$_APIGEE_PROD_ENV" > /workspace/apigeeEnv.txt
      else
          echo "$_APIGEE_TEST_ENV" > /workspace/apigeeEnv.txt
      fi

      echo "$(cat ./config/default.json | jq .apiConfig.proxyName) | tr -d '"' " > /workspace/proxyName.txt

      cat /workspace/apigeeEnv.txt
      cat /workspace/proxyName.txt


  - name: 'ubuntu'
    id: 'Create and deploy bundle with apigeecli'
    script: |
      #!/usr/bin/env bash

      apt-get update > /dev/null
      apt-get -y install jq curl zip unzip > /dev/null

      curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | bash
      export PATH=$PATH:$HOME/.apigeecli/bin

      PROXY_NAME=$(cat /workspace/proxyName.txt)
      APIGEE_ENV=$(cat /workspace/apigeeEnv.txt)

      # setup preferences
      apigeecli prefs set --nocheck=true -o "$_DEPLOYMENT_ORG"
      apigeecli token cache --metadata-token

      REV=$(apigeecli apis create bundle -n "${PROXY_NAME}" -f "./apiproxy" --disable-check | jq '.revision' -r)
      apigeecli apis deploy --wait --name "${PROXY_NAME}" --ovr --rev "${REV}" --env "${APIGEE_ENV}" --disable-check


  #   # Deploy using the Apigee credentials from above
  # - name: "gcr.io/cloud-builders/mvn"
  #   id: "Proxy Deployment"
  #   entrypoint: "bash"
  #   args:
  #     - "-c"
  #     - |-
  #         source env.txt && \
  #         mvn clean install -ntp \
  #           -P"googleapi" \
  #           -Denv="$${APIGEE_ENV}" \
  #           -Dtoken="$${APIGEE_BUILD_TOKEN}" \
  #           -Dorg="$_DEPLOYMENT_ORG" \
  #           -Ddeployment.suffix="$${APIGEE_DEPLOYMENT_SUFFIX}" \
  #           -Ddeployment.description="CloudRun Build: $BUILD_ID"

  #   # Run integration tests
  # - name: node
  #   id: "Integration Test"
  #   entrypoint: "bash"
  #   args:
  #     - "-c"
  #     - |-
  #       cd "$_WORK_DIR"
  #       source env.txt && \
  #       npm run integration-test | tee report.e2e.html && \
  #       if [ ${PIPESTATUS[0]} -ne "0" ]; then exit -1; fi
  #   env:
  #     - "TEST_HOST=$_INT_TEST_HOST"
  #   # Copy coverage reports and other deployment artifacts to a storage bucket
  # - name: "gcr.io/cloud-builders/gsutil"
  #   id: "Archive Report"
  #   entrypoint: "bash"
  #   args:
  #     - "-c"
  #     - |-
  #       cd "$_WORK_DIR"
  #       gsutil cp -r coverage* \
  #       gs://${PROJECT_ID}_cloudbuild/reports/$BUILD_ID/coverage && \
  #       gsutil cp ./report.*.html \
  #       gs://${PROJECT_ID}_cloudbuild/reports/$BUILD_ID
options:
  automapSubstitutions: true
substitutions:
  _DEPLOYMENT_ORG: cabral-apigee
  _APIGEE_TEST_ENV: dev
  _APIGEE_PROD_ENV: prod
  _DEV_HOST: dev.35.227.240.213.nip.io
  _PROD_HOST: prod.35.227.240.213.nip.io